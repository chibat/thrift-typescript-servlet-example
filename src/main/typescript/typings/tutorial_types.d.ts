//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


/**
 * You can define enums, which are just 32 bit integers. Values are optional
 * and start at 1 if not supplied, C style again.
 */
declare enum Operation {
  'ADD' = 1,
  'SUBTRACT' = 2,
  'MULTIPLY' = 3,
  'DIVIDE' = 4,
}

/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 */
declare class Work {
  num1: number;
  num2: number;
  op: Operation;
  comment: string;

  constructor(args?: { num1: number; num2: number; op: Operation; comment?: string; });
}

/**
 * Structs can also be exceptions, if they are nasty.
 */
declare class InvalidOperation extends Thrift.TException {
  what: number;
  why: string;

  constructor(args?: { what: number; why: string; });
}

/**
 * Thrift also lets you define constants for use across languages. Complex
 * types and structs are specified using JSON notation.
 */
declare var INT32CONSTANT: number;

declare var MAPCONSTANT: { [k: string]: string; };
